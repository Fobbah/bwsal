#summary Ideas for new BWSAL functionality

Ideas for new BWSAL functionality, in no particular order

= Rewrite the build order manager so it uses a better algorithm =

For example, building 60 SCVs with priority 100 and a barracks with priority 99 shouldn't wait until you have all 60 SCVs completed before constructing the barracks. Build the barracks as soon as possible without delaying/interrupting SCV production.

Build Order Manager should assume constant rate of mineral gathering, and should recalculate build order as needed. For example, assuming a constant rate of mineral increase, here is a build order plan for 20 SCVs at priority 100, 25 Marines at priority 90, and 2 Barracks at priority 80:

http://i.imgur.com/n4aYX.png

The algorithm probably doesn't need to calculate the entire plan, just the next minute or so (perhaps we can calculate it just in time). Also calculating the whole plan is probably not worthwhile since new build orders may come it at any time from the player, and the actual rate of mineral gathering isn't constant.

Within a priority level, orders are prioritized in descending order by: Tech, Upgrades, Building construction, and Unit production. (morphs could be filed under building construction or unit production based on what kind of morph it is). For now, skip invalid orders until they become valid. For example a build order set of:

  * Priority 100: 100 Marines
  * Priority 90: 100 SCVs
  * Priority 80: 1 Barracks

Should start building SCVs since there is no barracks. As soon as a barracks can be made without interrupting SCV production, the barracks should be constructed. Once the barracks is constructed, marines should be trained without interruption, and the rest of the SCVs can be made as soon as possible without interrupting marine production.

As we iterate through each priority level and sub-priority level in descending order, we will either be able to execute the build order immediately (unlikely) or be limited by units (i.e. number of factories) or by resources. If we are unit-limited, temporarily reserve sufficient resources for the build item and continue looking at lower priority build orders. If we are resource-limited, don't consider lower priority build orders (since resources are our limiting factor).

Another scenario: (Limited resource gather rate with high current amount of resources) Suppose we have sufficient supply and 1 Barracks and 1 Factory, 500 minerals, 10000 gas, but only 1 SCV mining minerals. The following build order:

  * Priority 100: 20 Siege Tanks
  * Priority 90: 20 Marines

Should produce siege tanks and marines as fast as possible until minerals start to run out, and then only siege tanks should be produced. Rate of siege tank production will be severely limited since only 1 scv is mining. Once all siege tanks are produced, the rest of the marines should be produced. The other possibility (which I don't plan to implement since it seems less useful) would be to only produce tanks to ensure uninterrupted tank production for as long as possible.

Within a priority the 4 sub-priority levels are Tech, Upgrades, Building construction, and Unit Production. The following defines how build orders will be ordered within each group:

=== Tech ===

Each building type that can research will have its own set of techs. Order the sets from largest to smallest. For each set, iterate from cheapest to most expensive and try to find a building that can research the tech, otherwise defer. If we are resource-limited, return without further processing. Otherwise, if we are unit-limited, reserve enough resources for the next tech and continue, else we are neither unit- nor resource-limited so execute and continue.

=== Upgrades ===

Each building type that can upgrade will have its own set of upgrades. Order the sets from longest to shortest. For each set, iterate from cheapest to most expensive and try to find a building that can research the upgrade, otherwise defer. If we are resource-limited, return without further processing. Otherwise, if we are unit-limited, reserve enough resources for the next upgrade and continue, else we are neither unit- nor resource-limited so execute and continue.

=== Building construction ===

Group building types by builder type (only needs to be taken into account for add-ons). Order building types in ascending order by tech level. If we are resource-limited, return without further processing. Otherwise, if we are unit-limited, reserve enough resources for the next unit and continue, else we are neither unit- nor resource-limited so execute and continue.

=== Unit production ===

Iterate through each type of production unit type. For each type, build the unit type with the most amount queued up (so if we have 20 marines and 10 medics, we produce marines from all barracks until we have 10 marines, then alternate between marines and medics). Units that require add-ons get higher priority for factories that have addons (siege tanks, dropships, etc). If we are unit-limited, reserve enough resources for the next unit and continue, else we are resource-limited so return without further processing.

= Information Manager =

Not a controller.

For imperfect information AI, use logic to infer things. For example, if you see a Corsair, you know a Stargate was created at some point, and you can determine an upper bound on when it was created. Similarly you can infer a Cybernetics core was created with a different upper bound on its creation, etc. If you see a psionic storm you can infer the enemy has researched that tech and has a high templar.

Also we can provide a reasonable guess as to the existence of units - for example you saw a unit, and never saw it die via onUnitDestroy, then it probably still exists. Or if you saw a building at a particular spot, and you can see those build tiles and the building is not there, then it was probably destroyed at some point (unless it was a Terran building that can lift, in which case it may have just moved to a different spot).

Also keeps track of last seen positions and the time the unit was last seen. Maybe do some stuff to calculate probability unit is at tile X,Y, assuming the unit began a random walk when it went out of sight. Though this might be too calculation intensive to do in real time for every movable unit.

= Other Ideas =

  * UnitGroup class to make it easier to manipulate groups of units. Examples:

SelectAll(UnitTypes::Terran_Marines).withInRadius(300,startPosition).attackUnit(enemy)

SelectAll(UnitTypes::Protoss_Probe).isIdle().getCenter()

perhaps a different sort of interface:

AllUnits.filter(Broodwar->self()).filter(UnitTypes::Terran_Marines).getNearest(AllUnits.filter(Broodwar->enemy()).filter(UnitTypes::Zerg_Mutalisk).getCenter()).rightClick(Broodwar->getStartLocation())


  * Make the build order manager take into account dependencies (so building a factory with no barracks planned will build a barracks first)
  * Attack Manager - attack stuff, maybe break down into smaller managers
  * Contain Manager - contains the enemy with siege tanks, lurkers, etc.
  * Front Manager - Not a controller, tries to calculate where our front ends and where the enemy's front begins.
  * Repair Manager - repair units that are damaged
  * Threat Assessment Manager - influence maps. Determine which tiles are dangerous and how much. Also assign a priority to units that are attacking our base.
  * Risk Adverse Path Manager - moves units to their destination using the safest path (recalculate paths when new threats are discovered i.e. Missile Turrets)
  * Transport Manager - transports units to a given position, perhaps with a priority, using the risk adverse path planner to find safest paths

  * Improve the scout manager so that it tries to stay alive as long as possible inside the enemy base once it finds the enemy base

  * Add a function to the building placer which takes a choke point and list of building unit types (possibly with repetitions) and returns a list of unit type - build position pairs that can be used to block off the choke point.