#summary Ideas for new BWSAL functionality

Ideas for new BWSAL functionality, in no particular order

= Force Manager =

Not a controller.

A simple manager that can implement basic AI functionality for attacking. A force manager can be used to determine what groups a player's or enemy's units consist of, and can choose a strategy of where to position the player's units. We can use it currently to assign ScoutManager the positions it needs to scout and when. We can also use it to assign DefenseManager a new chokepoint to defend in the case that an expansions is made or lost. This way we can move strategic logic out of ScoutManager (and I would say DefenseManager, but it doesn't even have that =) to pave the way towards fixing it. Later we can split it up into a more complex array of managers, but for now we can use it to implement basic defend, retreat, or later, attack functionality.

= Information Manager =

Not a controller.

For imperfect information AI, use logic to infer things. For example, if you see a Corsair, you know a Stargate was created at some point, and you can determine an upper bound on when it was created. Similarly you can infer a Cybernetics core was created with a different upper bound on its creation, etc. If you see a psionic storm you can infer the enemy has researched that tech and has a high templar.

Also we can provide a reasonable guess as to the existence of units - for example you saw a unit, and never saw it die via onUnitDestroy, then it probably still exists. Or if you saw a building at a particular spot, and you can see those build tiles and the building is not there, then it was probably destroyed at some point (unless it was a Terran building that can lift, in which case it may have just moved to a different spot).

Also keeps track of last seen positions and the time the unit was last seen. Maybe do some stuff to calculate probability unit is at tile X,Y, assuming the unit began a random walk when it went out of sight. Though this might be too calculation intensive to do in real time for every movable unit.

= Scout Manager =

Improve the scout manager so that it tries to stay alive as long as possible inside the enemy base once it finds the enemy base

Might be possible to split the scout manager into 3 overall tasks or goals:

1) Scout empty base locations to check for new enemy bases

2) Scout enemy bases for tech buildings and production capabilities

3) Scout enemy army for size, unit composition, and position

The first two tasks usually occur at specific points in time (i.e. scout on frame X to see if a Spire or Hydralisk Den was constructed) and might be possible to plan in advance, while the third task is more of a continuous process that starts as soon as the first military unit is created.

The Scout Manager does not determine how important each of these tasks are, or how much units to use. Rather the AI tells the scout manager this information. The role of the scout manager is to scout based on the importance levels (i.e. find the best way to enter and scout the enemy base, given the units it has).

= Other Ideas =

  * UnitGroup class to make it easier to manipulate groups of units. Examples:

SelectAll(UnitTypes::Terran_Marine).withInRadius(300,startPosition).attackUnit(enemy)

SelectAll(UnitTypes::Protoss_Probe).isIdle().getCenter()

perhaps a different sort of interface:

AllUnits.filter(Broodwar->self()).filter(UnitTypes::Terran_Marine).getNearest(AllUnits.filter(Broodwar->enemy()).filter(UnitTypes::Zerg_Mutalisk).getCenter()).rightClick(Broodwar->getStartLocation())

(rightclicks our marine that is closest to the center of the group of enemy mutalisks back to home base)
  * Improve the Supply Manager so it uses a more precise algorithm (currently just uses a simple heuristic)
  * Attack Manager - attack stuff, maybe break down into smaller managers
  * Contain Manager - contains the enemy with siege tanks, lurkers, etc.
  * Front Manager - Not a controller, tries to calculate where our front ends and where the enemy's front begins.
  * Repair Manager - repair units that are damaged
  * Threat Assessment Manager - influence maps. Determine which tiles are dangerous and how much. Also assign a priority to units that are attacking our base.
  * Risk Adverse Path Manager - moves units to their destination using the safest path (recalculate paths when new threats are discovered i.e. Missile Turrets)
  * Transport Manager - transports units to a given position, perhaps with a priority, using the risk adverse path planner to find safest paths

  * Add a function to the building placer which takes a choke point and list of building unit types (possibly with repetitions) and returns a list of unit type - build position pairs that can be used to block off the choke point.