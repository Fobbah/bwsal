#sidebar TableOfContents

Class header file: http://code.google.com/p/bwsal/source/browse/trunk/BWSAL/include/UnitGroup.h

The UnitGroup class is defined as a std::set<BWAPI::Unit{{{*}}}> object with a number of additional methods:

  * [#getCenter getCenter]
  * [#withinRadius withinRadius]
  * [#operator() operator()]
  * [#not not]
  * [#operator+ operator+]
  * [#operator* operator*]
  * [#operator^ operator^]
  * [#operator- operator-]

=== getCenter ===
BWAPI::Position getCenter() const;

Returns the average position of all the units in the UnitGroup.

=== withinRadius ===
UnitGroup withinRadius(double radius,BWAPI::Position position) const;

Returns a UnitGroup containing all the units of this UnitGroup which have a distance of less than {{{radius}}} to the given position.

=== operator() ===
  * UnitGroup operator()(int f1) const;
  * UnitGroup operator()(int f1, int f2) const;
  * UnitGroup operator()(int f1, int f2, int f3) const;
  * UnitGroup operator()(int f1, int f2, int f3, int f4) const;
  * UnitGroup operator()(int f1, int f2, int f3, int f4, int f5) const;

operator() can be used to create a UnitGroup containing only the units that satisfy one of the specified properties. For example, the following 2 lines creates a UnitGroup called myWorkers which holds all the worker units owned by the player:

UnitGroup myUnits=SelectAll()

UnitGroup myWorkers = myUnits(isWorker)

This can be further narrowed down to only idle workers by another call to operator():

UnitGroup myIdleWorkers = myWorkers(isIdle)

Finally, we can compress this to just 1 line:

UnitGroup myIdleWorkers = SelectAll(isWorker)(isIdle)

Also all of the Unit command methods also exist in the UnitGroup class, making it easy to issue the same command to every unit in the UnitGroup.

As another example, the following gets all units that are gathering minerals or gas:

UnitGroup gatheringUnits = SelectAll()(isGatheringMinerals,isGatheringGas);

=== not ===
  * UnitGroup not(int f1) const;
  * UnitGroup not(int f1, int f2) const;
  * UnitGroup not(int f1, int f2, int f3) const;
  * UnitGroup not(int f1, int f2, int f3, int f4) const;
  * UnitGroup not(int f1, int f2, int f3, int f4, int f5) const;

not() can be used to create a UnitGroup containing all the units that do not satisfy the given property.

=== operator+ ===
UnitGroup operator+(const UnitGroup& other) const;

Returns the union of this UnitGroup with the specified UnitGroup.

=== operator{{{*}}} ===
UnitGroup operator{{{*}}}(const UnitGroup& other) const;

Returns the intersection of this UnitGroup with the specified UnitGroup.

=== operator{{{^}}} ===
UnitGroup operator{{{^}}}(const UnitGroup& other) const;

Returns the symmetric difference of this UnitGroup with the specified UnitGroup.

=== operator- ===
UnitGroup operator-(const UnitGroup& other) const;

Returns the difference obtained when subtracting the specified unit group from this unit group.